Parameters:
  ConfigRuleName:
    Type: String
    Default: 'custom-lambda-public-url-prohibited'
    Description: The name of the Config Rule.
  
  LambdaFunctionName:
    Type: String
    Default: 'custom-lambda-public-url-prohibited'
    Description: The name of the Lambda Function.
  
  DemoLambdas:
    Type: String
    AllowedValues: ['true', 'false']
    Default: 'false'
    Description: Create a public and private Lambda function for demo.

Conditions:
  CreateDemoLambdas: !Equals [!Ref DemoLambdas, true]

Resources:
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: !Sub role-${LambdaFunctionName}
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - config:Put*
            - config:Get*
            - config:List*
            - config:Select*
            - config:BatchGet*
            - config:Describe*
            - logs:PutLogEvents
            - logs:CreateLogGroup
            - logs:CreateLogStream
            Resource: "*"

  LambdaInvokePermission: 
    Type: AWS::Lambda::Permission
    Properties: 
      FunctionName: !GetAtt LambdaFunction.Arn
      Action: "lambda:InvokeFunction"
      Principal: "config.amazonaws.com"
      SourceAccount: !Ref 'AWS::AccountId'
  
  ConfigRule: 
    Type: AWS::Config::ConfigRule
    Properties: 
      ConfigRuleName: !Ref ConfigRuleName
      Scope: 
        ComplianceResourceTypes: 
          - "AWS::Lambda::Function"
      Source: 
        Owner: "CUSTOM_LAMBDA"
        SourceDetails: 
          - EventSource: "aws.config"
            MessageType: "ConfigurationItemChangeNotification"
        SourceIdentifier: !GetAtt LambdaFunction.Arn
    DependsOn: LambdaInvokePermission

  LambdaFunction: 
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Ref LambdaFunctionName
      Handler: "index.lambda_handler"
      Runtime: python3.8
      Timeout: 30
      Role: !GetAtt LambdaExecutionRole.Arn
      Code: 
        ZipFile: 
          !Sub |
            from botocore.exceptions import ClientError
            import datetime
            import boto3
            import json

            '''
            Slimmed from https://docs.aws.amazon.com/config/latest/developerguide/evaluate-config_develop-rules_python-sample.html#event-based-example-rule
            '''

            def get_configuration(resource_type, resource_id, configuration_capture_time):
                result = AWS_CONFIG_CLIENT.get_resource_config_history(
                    resourceType=resource_type,
                    resourceId=resource_id,
                    laterTime=configuration_capture_time,
                    limit=1)
                configurationItem = result['configurationItems'][0]
                return convert_api_configuration(configurationItem)

            def convert_api_configuration(configurationItem):
                for k, v in configurationItem.items():
                    if isinstance(v, datetime.datetime):
                        configurationItem[k] = str(v)
                configurationItem['awsAccountId'] = configurationItem['accountId']
                configurationItem['ARN'] = configurationItem['arn']
                configurationItem['configurationStateMd5Hash'] = configurationItem['configurationItemMD5Hash']
                configurationItem['configurationItemVersion'] = configurationItem['version']
                configurationItem['configuration'] = json.loads(
                    configurationItem['configuration'])
                if 'relationships' in configurationItem:
                    for i in range(len(configurationItem['relationships'])):
                        configurationItem['relationships'][i]['name'] = configurationItem['relationships'][i]['relationshipName']
                return configurationItem

            def is_applicable(configurationItem, event):
                status = configurationItem['configurationItemStatus']
                eventLeftScope = event['eventLeftScope']
                if status == 'ResourceDeleted':
                    print("Resource Deleted, setting Compliance Status to NOT_APPLICABLE.")
                return (status == 'OK' or status == 'ResourceDiscovered') and not eventLeftScope

            def get_assume_role_credentials(role_arn):
                sts_client = boto3.client('sts')
                try:
                    assume_role_response = sts_client.assume_role(
                        RoleArn=role_arn, RoleSessionName="configLambdaExecution")
                    return assume_role_response['Credentials']
                except ClientError as ex:
                    if 'AccessDenied' in ex.response['Error']['Code']:
                        ex.response['Error']['Message'] = "AWS Config does not have permission to assume the IAM role."
                    else:
                        ex.response['Error']['Message'] = "InternalError"
                        ex.response['Error']['Code'] = "InternalError"
                    raise ex

            def is_public_policy(policy):
                policy = json.loads(policy)
                for rule in policy['Statement']:
                    try:
                        if rule['Condition']['StringEquals']['lambda:FunctionUrlAuthType'] == 'NONE':
                            return True # NON_COMPLIANT
                    except KeyError:
                        continue
                return False # COMPLIANT

            def evaluate_change_notification_compliance(configuration_item):
                if configuration_item['resourceType'] != 'AWS::Lambda::Function':
                    return 'NOT_APPLICABLE'
                elif 'supplementaryConfiguration' in configuration_item:
                    if 'Policy' in configuration_item['supplementaryConfiguration']:
                        if is_public_policy(configuration_item['supplementaryConfiguration']['Policy']):
                            print("FunctionUrlAuthType set to NONE, setting Compliance Status to NON_COMPLIANT.")
                            return 'NON_COMPLIANT'
                return 'COMPLIANT'

            def lambda_handler(event, context):
                global AWS_CONFIG_CLIENT
                
                invoking_event = json.loads(event['invokingEvent'])
                configuration_item = invoking_event['configurationItem']
                compliance_value = 'NOT_APPLICABLE'
                
                AWS_CONFIG_CLIENT = boto3.client('config')
                
                if is_applicable(configuration_item, event):
                    compliance_value = evaluate_change_notification_compliance(configuration_item)
                
                AWS_CONFIG_CLIENT.put_evaluations(
                    Evaluations=[
                        {
                            'ComplianceResourceType': invoking_event['configurationItem']['resourceType'],
                            'ComplianceResourceId': invoking_event['configurationItem']['resourceId'],
                            'ComplianceType': compliance_value,
                            'OrderingTimestamp': invoking_event['configurationItem']['configurationItemCaptureTime']
                        },
                    ],
                    ResultToken=event['resultToken']
                )

### Demo Resources

  DemoLambdaExecutionRole:
    Type: AWS::IAM::Role
    Condition: CreateDemoLambdas
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: !Sub role-demo-${LambdaFunctionName}
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:PutLogEvents
            - logs:CreateLogGroup
            - logs:CreateLogStream
            Resource: "*"

  DemoPublicLambdaFunction: 
    Type: AWS::Lambda::Function
    Condition: CreateDemoLambdas
    Properties:
      FunctionName: 'demo-public-lambda'
      Handler: "index.lambda_handler"
      Runtime: python3.8
      Timeout: 30
      Role: !GetAtt DemoLambdaExecutionRole.Arn
      Code:
        ZipFile:
          !Sub |
            import json
            def lambda_handler(event, context):
                return {'statusCode': 200,'body': json.dumps('public')}

  DemoPublicInvokePermission: 
    Type: AWS::Lambda::Permission
    Properties: 
      FunctionName: !GetAtt DemoPublicLambdaFunction.Arn
      Action: "lambda:InvokeFunctionUrl"
      FunctionUrlAuthType: NONE
      Principal: "*"

  DemoPublicLambdaUrl:
    Type: AWS::Lambda::Url
    Condition: CreateDemoLambdas
    Properties: 
      AuthType: NONE
      TargetFunctionArn: !Ref DemoPublicLambdaFunction
    DependsOn: DemoPublicLambdaFunction

  DemoPrivateLambdaFunction: 
    Type: AWS::Lambda::Function
    Condition: CreateDemoLambdas
    Properties:
      FunctionName: 'demo-private-lambda'
      Handler: "index.lambda_handler"
      Runtime: python3.8
      Timeout: 30
      Role: !GetAtt DemoLambdaExecutionRole.Arn
      Code:
        ZipFile:
          !Sub |
            import json
            def lambda_handler(event, context):
                return {'statusCode': 200,'body': json.dumps('private')}

  DemoPrivateInvokePermission: 
    Type: AWS::Lambda::Permission
    Properties: 
      FunctionName: !GetAtt DemoPrivateLambdaFunction.Arn
      Action: "lambda:InvokeFunction"
      Principal: "config.amazonaws.com"
      SourceAccount: !Ref 'AWS::AccountId'
